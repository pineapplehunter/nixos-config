diff --git a/src/__main__.py b/src/__main__.py
index f757f6f..c34026e 100644
--- a/src/__main__.py
+++ b/src/__main__.py
@@ -2,41 +2,45 @@ import json
 import sys
 import requests
 
-def main():
-    # Set the URL of the registry you want to use
-    registry_url = 'https://registry.npmjs.org/'
+# Set the URL of the registry
+REGISTRY_URL = 'https://registry.npmjs.org/'
 
-    # Get the path to the package-lock.json file from the command-line arguments
-    if len(sys.argv) != 2:
-        print('Usage: npm-fixer /path/to/package-lock.json')
-        sys.exit(1)
-    lockfile_path = sys.argv[1]
 
-    # Load the package-lock.json file
+def get_lockfile_json(lockfile_path: str):
+    """Take a filepath to a json file and return the json as a python object"""
+    print(lockfile_path)
     with open(lockfile_path, 'r') as f:
-        lockfile = json.load(f)
+        lockfile_json = json.load(f)
 
-    # Loop over each package in the packages section of the lockfile
-    for package_key in lockfile['packages']:
+    return lockfile_json
+
+
+def loop_through_packages(packages: json) -> None:
+    """Loop over each package in the packages section of the lockfile"""
+
+    # Establish a session to allow a connection to the same host to persist.
+    session = requests.Session()
+
+    for package_key in packages:
         # Ignore the empty key & local packages
-        if package_key == "" or not "node_modules/" in package_key:
+        if package_key == "" or "node_modules/" not in package_key:
             continue
 
-        package = lockfile['packages'][package_key]
-        package_name = package.get("name") or package_key.split("node_modules/")[-1]
+        package: str = packages[package_key]
+        package_name: str = package.get("name") or package_key.split("node_modules/")[-1]
 
         # Check if the package is missing resolved and integrity fields
-        noResolved = 'resolved' not in package
-        noIntegrity = 'integrity' not in package
-        noLink = 'link' not in package
+        noResolved: bool = 'resolved' not in package
+        noIntegrity: bool = 'integrity' not in package
+        noLink: bool = 'link' not in package
         if noResolved or (noIntegrity and noLink):
             # Get the package version from the lockfile
-            version = package['version']
+            version: str = package['version']
 
             # Fetch the package metadata from the registry
-            response = requests.get(f"{registry_url + package_name}/{version}")
+            response = session.get(f"{REGISTRY_URL + package_name}/{version}")
             if response.status_code == 200:
-                package_data = response.json()
+                package_data: json = response.json()
                 # Get the dist field for the specific version
                 # of the package we care about
                 dist = package_data['dist']
@@ -49,21 +53,33 @@ def main():
             else:
                 # Print a message indicating that the package could not be fetched
                 print(f"Could not fetch metadata for {package_key}@{version}.")
-                print(f"foo {registry_url + package_name}/{version}")
+                print(f"foo {REGISTRY_URL + package_name}/{version}")
                 print(f"Status code: {response.status_code}.")
 
-    # Save the updated package-lock.json file
-    with open(lockfile_path, 'w') as f:
-        json.dump(lockfile, f, indent=2)
 
+def save_json(data: json, path: str) -> None:
+    """Write the json data to given file path."""
+    with open(path, 'w') as f:
+        json.dump(data, f, indent=2)
 
 
+def main():
+    # Get the path to the package-lock.json file from the command-line arguments
+    if len(sys.argv) != 2:
+        print('Usage: npm-fixer /path/to/package-lock.json')
+        sys.exit(1)
+    lockfile_path = sys.argv[1]
+
+    lockfile_json = get_lockfile_json(lockfile_path)
+
+    loop_through_packages(lockfile_json['packages'])
+
+    save_json(lockfile_json, lockfile_path)
+
 
 if __name__ == "__main__":
     main()
 
-
-
 # Local Variables:
 # mode: python-ts
 # End:
