diff --git a/Process.c b/Process.c
index 2cca19db..f863914e 100644
--- a/Process.c
+++ b/Process.c
@@ -19,6 +19,7 @@ in the source distribution for its full text.
 #include <string.h>
 #include <time.h>
 #include <sys/resource.h>
+#include <ctype.h>
 
 #include "CRT.h"
 #include "Hashtable.h"
@@ -40,6 +41,8 @@ in the source distribution for its full text.
 /* Used to identify kernel threads in Comm and Exe columns */
 static const char* const kthreadID = "KTHREAD";
 
+static const char* const nix_prefix = "nix::";
+
 void Process_fillStarttimeBuffer(Process* this) {
    struct tm date;
    time_t now = this->super.host->realtime.tv_sec;
@@ -164,9 +167,13 @@ static int matchCmdlinePrefixWithExeSuffix(const char* cmdline, int cmdlineBaseO
 }
 
 /* stpcpy, but also converts newlines to spaces */
-static inline char* stpcpyWithNewlineConversion(char* dstStr, const char* srcStr) {
+static inline char* stpcpyWithNewlineConversionStripNix(char* dstStr, const char* srcStr) {
    for (; *srcStr; ++srcStr) {
-      *dstStr++ = (*srcStr == '\n') ? ' ' : *srcStr;
+      if (memcmp(srcStr,"/nix/store",10)==0){
+         dstStr = stpcpy(dstStr,nix_prefix);
+         srcStr += strlen("/nix/store/") + 32;
+      }else
+         *dstStr++ = (*srcStr == '\n') ? ' ' : *srcStr;
    }
    *dstStr = 0;
    return dstStr;
@@ -252,6 +259,17 @@ void Process_makeCommandStr(Process* this, const Settings* settings) {
          break;                                                                               \
       } else (void)0
 
+   #define CHECK_AND_MARK_NIX(str_, prefix_)                                                  \
+      if (String_startsWith(str_, prefix_)) {                                                 \
+         unsigned int len = strlen(nix_prefix);                                               \
+         const char* s = str_ + strlen("/nix/store/") + 32 + 1;                               \
+         while (*s && *s != ' ' && isprint(*s)) { s++; len++; }                               \
+         while (len && *s != '/') { s--; len--; }                                             \
+         if(*s=='/') len++;                                                                   \
+         WRITE_HIGHLIGHT(0, len, CRT_colors[PROCESS_SHADOW], CMDLINE_HIGHLIGHT_FLAG_PREFIXDIR); \
+         break;                                                                               \
+      } else (void)0
+
    #define CHECK_AND_MARK_DIST_PATH_PREFIXES(str_)                                            \
       do {                                                                                    \
          if ((str_)[0] != '/') {                                                              \
@@ -293,6 +311,9 @@ void Process_makeCommandStr(Process* this, const Settings* settings) {
                   }                                                                           \
                }                                                                              \
                break;                                                                         \
+            case 'n':                                                                         \
+               CHECK_AND_MARK_NIX(str_, "/nix/store/");                                       \
+               break;                                                                         \
          }                                                                                    \
       } while (0)
 
@@ -325,7 +346,7 @@ void Process_makeCommandStr(Process* this, const Settings* settings) {
       if ((showMergedCommand || (Process_isUserlandThread(this) && showThreadNames)) && procComm && strlen(procComm)) { /* set column to or prefix it with comm */
          if (strncmp(cmdline + cmdlineBasenameStart, procComm, MINIMUM(TASK_COMM_LEN - 1, strlen(procComm))) != 0) {
             WRITE_HIGHLIGHT(0, strlen(procComm), commAttr, CMDLINE_HIGHLIGHT_FLAG_COMM);
-            str = stpcpy(str, procComm);
+            str = stpcpyWithNewlineConversionStripNix(str, procComm);
 
             if (!showMergedCommand)
                return;
@@ -345,7 +366,7 @@ void Process_makeCommandStr(Process* this, const Settings* settings) {
       else if (this->usesDeletedLib)
          WRITE_HIGHLIGHT(showProgramPath ? cmdlineBasenameStart : 0, cmdlineBasenameEnd - cmdlineBasenameStart, delLibAttr, CMDLINE_HIGHLIGHT_FLAG_DELETED);
 
-      (void)stpcpyWithNewlineConversion(str, cmdline + (showProgramPath ? 0 : cmdlineBasenameStart));
+      (void)stpcpyWithNewlineConversionStripNix(str, cmdline + (showProgramPath ? 0 : cmdlineBasenameStart));
 
       return;
    }
@@ -373,7 +394,7 @@ void Process_makeCommandStr(Process* this, const Settings* settings) {
          WRITE_HIGHLIGHT(exeBasenameOffset, exeBasenameLen, delExeAttr, CMDLINE_HIGHLIGHT_FLAG_DELETED);
       else if (this->usesDeletedLib)
          WRITE_HIGHLIGHT(exeBasenameOffset, exeBasenameLen, delLibAttr, CMDLINE_HIGHLIGHT_FLAG_DELETED);
-      str = stpcpy(str, procExe);
+      str = stpcpyWithNewlineConversionStripNix(str, procExe);
    } else {
       if (haveCommInExe)
          WRITE_HIGHLIGHT(0, exeBasenameLen, commAttr, CMDLINE_HIGHLIGHT_FLAG_COMM);
@@ -382,7 +403,7 @@ void Process_makeCommandStr(Process* this, const Settings* settings) {
          WRITE_HIGHLIGHT(0, exeBasenameLen, delExeAttr, CMDLINE_HIGHLIGHT_FLAG_DELETED);
       else if (this->usesDeletedLib)
          WRITE_HIGHLIGHT(0, exeBasenameLen, delLibAttr, CMDLINE_HIGHLIGHT_FLAG_DELETED);
-      str = stpcpy(str, procExe + exeBasenameOffset);
+      str = stpcpyWithNewlineConversionStripNix(str, procExe + exeBasenameOffset);
    }
 
    bool haveCommInCmdline = false;
@@ -402,7 +423,7 @@ void Process_makeCommandStr(Process* this, const Settings* settings) {
    if (!haveCommInExe && !haveCommInCmdline && procComm && (!Process_isUserlandThread(this) || showThreadNames)) {
       WRITE_SEPARATOR;
       WRITE_HIGHLIGHT(0, strlen(procComm), commAttr, CMDLINE_HIGHLIGHT_FLAG_COMM);
-      str = stpcpy(str, procComm);
+      str = stpcpyWithNewlineConversionStripNix(str, procComm);
       haveCommField = true;
    }
 
@@ -431,7 +452,7 @@ void Process_makeCommandStr(Process* this, const Settings* settings) {
 
    /* Display cmdline if it hasn't been consumed by procExe */
    if (*cmdline)
-      (void)stpcpyWithNewlineConversion(str, cmdline);
+      (void)stpcpyWithNewlineConversionStripNix(str, cmdline);
 
    #undef CHECK_AND_MARK_DIST_PATH_PREFIXES
    #undef CHECK_AND_MARK
